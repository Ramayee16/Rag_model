# backend/app.py
# -------------------------------------------------------------
# FastAPI backend for "ü§ñ Intelligent Document Q&A System using RAG Model"
# -------------------------------------------------------------
# This file connects with your Streamlit frontend (Streamlit_RAG_QA_App.py)
# and uses your local CSV or ML logic to generate answers.
#
# How it works:
#  - Streamlit sends a POST request to http://localhost:8000/ask
#  - This backend reads your CSV or model
#  - Returns a JSON response with answer + sources
# -------------------------------------------------------------

from fastapi import FastAPI
from pydantic import BaseModel
import pandas as pd
import re

# -------------------------------------------------------------
# 1Ô∏è‚É£ Create FastAPI app
# -------------------------------------------------------------
app = FastAPI(
    title="Intelligent Document Q&A Backend",
    description="Backend API for RAG-based Question & Answer System",
    version="1.0.0",
)

# -------------------------------------------------------------
# 2Ô∏è‚É£ Input Schema (matches what Streamlit sends)
# -------------------------------------------------------------
class Query(BaseModel):
    question: str
    top_k: int = 3
    metadata: dict | None = None


# -------------------------------------------------------------
# 3Ô∏è‚É£ Load Data or Model
# -------------------------------------------------------------
# You can connect to your notebook model here.
# For now, it loads CSV and searches text for the question.
CSV_PATH = "data/documents.csv"

try:
    df = pd.read_csv(CSV_PATH)
    print(f"‚úÖ Loaded data from {CSV_PATH} ‚Äî {len(df)} records found.")
except Exception as e:
    print(f"‚ö†Ô∏è Could not load CSV at {CSV_PATH}: {e}")
    df = pd.DataFrame(columns=["id", "title", "content"])


# -------------------------------------------------------------
# 4Ô∏è‚É£ Helper Function ‚Äî Simple Keyword Search
# -------------------------------------------------------------
def find_best_matches(question: str, top_k: int = 3):
    """
    Basic keyword search ‚Äî looks for question words inside the CSV.
    Replace this logic with your real RAG model if you have embeddings.
    """
    if df.empty:
        return "No documents loaded.", []

    question_keywords = re.findall(r"\\w+", question.lower())
    df["score"] = df["content"].fillna("").apply(
        lambda text: sum(word in text.lower() for word in question_keywords)
    )

    results = df.sort_values(by="score", ascending=False).head(top_k)
    if results.empty or results["score"].sum() == 0:
        return "No relevant answer found.", []
    else:
        best_row = results.iloc[0]
        answer = best_row["content"]
        sources = results[["title", "content"]].to_dict(orient="records")
        return answer, sources


# -------------------------------------------------------------
# 5Ô∏è‚É£ API Endpoint
# -------------------------------------------------------------
@app.post("/ask")
def ask_question(query: Query):
    """
    This endpoint receives a question from Streamlit
    and returns the best-matching answer + sources.
    """
    question = query.question.strip()
    if not question:
        return {"error": "Question cannot be empty."}

    # Process question
    answer, sources = find_best_matches(question, query.top_k)

    # Return JSON response
    return {
        "answer": answer,
        "sources": sources,
        "metadata": query.metadata or {},
    }


# -------------------------------------------------------------
# 6Ô∏è‚É£ Root Endpoint
# -------------------------------------------------------------
@app.get("/")
def root():
    return {
        "message": "Welcome to Intelligent Document Q&A Backend!",
        "usage": "POST a question to /ask to get an answer.",
        "data_loaded": len(df),
    }
